<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>sls</groupId>
	<artifactId>transferencia-eletronica</artifactId>
	<version>1.1</version>
	<packaging>pom</packaging>
	<modules>
		<module>transferencia-eletronica-api</module>
		<module>transferencia-eletronica-core</module>
		<module>transferencia-eletronica-extranet-ui</module>
		<module>transferencia-eletronica-manager</module>
	</modules>


	<properties>
		<project.build.sourceEncoding>UTF-8	</project.build.sourceEncoding>
		<!-- Essa propriedade serve para desligar a execucao dos testes de integracao 
			nas builds normais. Veja o profile "com-testes-integracao" para mais detalhes -->
		<surefire.exclude.testes.integracao>**/*IntegrationTest.java</surefire.exclude.testes.integracao>

		<liquibase.db.driver>oracle.jdbc.OracleDriver</liquibase.db.driver>
		<liquibase.default.schema.name>TEMPLATE_WEB</liquibase.default.schema.name>

		<spring.version>5.2.4.RELEASE</spring.version>
		<hibernate.version>5.4.14.Final</hibernate.version>
		<hibernate.validator.version>6.1.2.Final</hibernate.validator.version>
		<slf4j.version>1.7.30</slf4j.version>
		<spring.data.version>1.10.1.RELEASE</spring.data.version>
		<liquibase.version>3.4.0</liquibase.version>
		<ojdbc6.version>11.2.0.4</ojdbc6.version>

		<junit.version>4.12</junit.version>
		<selenium.version>2.46.0</selenium.version>
		<mockito.version>2.21.0</mockito.version>
		<h2.version>1.4.192</h2.version>
		<jetty.plugin.version>9.2.14.v20151106</jetty.plugin.version>
		<docker.username>samuelsantana</docker.username>

		<!--usuario docker hub -->
		<docker.image.prefix>${docker.username}</docker.image.prefix>

		<!--nome da imagem do projeto docker hub -->
		<docker.image.name>transferencia-eletronica-docker</docker.image.name>

		<sonar.sources>src/main</sonar.sources>
		<sonar.tests>src/test</sonar.tests>
		<!-- Below property indicates the pattern of the test suite -->
		<runSuite>**/*Test.class</runSuite>
		<!-- Sonar-JaCoCo properties -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
		<sonar.language>java</sonar.language>

	</properties>

	<!-- PROFILES -->
	<profiles>
		<profile>
			<id>desenvolvimento</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<build.profile.id>desenvolvimento</build.profile.id>
			</properties>
		</profile>
		<profile>
			<id>homologacao</id>
			<properties>
				<build.profile.id>homologacao</build.profile.id>
			</properties>
		</profile>
		<profile>
			<id>producao</id>
			<properties>
				<build.profile.id>producao</build.profile.id>
			</properties>
		</profile>
		<profile>
			<id>docker</id>
			<properties>
				<build.profile.id>docker</build.profile.id>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.25.2</version>

						<configuration>

							<!--<dockerHost>http://127.0.0.1:2375</dockerHost> -->
							<dockerHost>unix:///var/run/docker.sock</dockerHost>

							<verbose>true</verbose>
							<images>
								<image>
									<name>${docker.image.prefix}/${docker.image.name}</name>
									<alias>${docker.image.name}</alias>
									<build>
										<dockerFileDir>${project.basedir}</dockerFileDir>

										<assembly>
											<descriptorRef></descriptorRef>
											<targetDir>/target</targetDir>
										</assembly>
										<tags>
											<tag>latest</tag>
											<tag>${project.version}</tag>
										</tags>
									</build>
									<run>
										<ports>
											<port>8080:8080</port>
										</ports>
										<links>
											<link>mysqldb:mysqldb, kafka:kafka</link>
										</links>
										<env>
											<SPRING_PROFILES_ACTIVE>mysql</SPRING_PROFILES_ACTIVE>
										</env>
										<dependsOn>
											<container>mysqldb, kafka</container>
										</dependsOn>
									</run>
								</image>


								<!--mysql container -->
								<image>
									<name>${docker.username}/mysql</name>
									<alias>mysqldb</alias>

									<build>
										<dockerFileDir>${project.basedir}/transferencia-eletronica-script/docker-script/mysql</dockerFileDir>

										<assembly>
											<descriptorRef></descriptorRef>
											<targetDir>/target</targetDir>
										</assembly>
										<tags>
											<tag>latest</tag>
											<tag>${project.version}</tag>
										</tags>
									</build>

									<run>
										<!--expose port for dn -->
										<ports>
											<port>3306:3306</port>
										</ports>
										<!--set env prams for mysql image -->
										<env>
											<MYSQL_DATABASE>transferenciaeletronica</MYSQL_DATABASE>
											<MYSQL_ROOT_PASSWORD>root</MYSQL_ROOT_PASSWORD>
										</env>
										<!--wait for db to start -->
										<wait>
											<time>70000</time>
										</wait>
									</run>
								</image>

								<!--kafka container -->
								<image>
									<name>${docker.username}/kafka</name>
									<alias>kafka</alias>
									<build>
										<dockerFileDir>${project.basedir}/transferencia-eletronica-script/docker-script/kafka</dockerFileDir>

										<assembly>
											<descriptorRef></descriptorRef>
											<targetDir>/target</targetDir>
										</assembly>
										<tags>
											<tag>latest</tag>
											<tag>${project.version}</tag>
										</tags>
									</build>
									<run>
										<!--expose port for dn -->
										<ports>
											<port>9092:9092</port>
											<port>9093:9093</port>
											<port>9095:9095</port>
											<port>2181:2181</port>
										</ports>
										<!-- <env> <KAFKA_LISTENER_SECURITY_PROTOCOL_MAP>SSL:SSL,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</KAFKA_LISTENER_SECURITY_PROTOCOL_MAP> 
											<KAFKA_ADVERTISED_LISTENERS>PLAINTEXT_HOST://localhost:9092, PLAINTEXT://kafka:9093, 
											SSL://127.0.0.1:9095</KAFKA_ADVERTISED_LISTENERS> </env> -->
									</run>
								</image>

							</images>
							<executions>
								<execution>
									<goals>
										<goal>resource</goal>
										<goal>build</goal>
									</goals>
								</execution>
							</executions>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<excludes>
						<exclude>${surefire.exclude.testes.integracao}</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>3.1.1</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<inherited>false</inherited>
				<executions>
					<execution>
						<id>preparando-novo-projeto</id>
						<phase>post-clean</phase>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<tasks>
						<ant antfile="build.xml" />
					</tasks>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>3.1.6</version>
				<inherited>false</inherited>
				<configuration>
					<effort>Max</effort>
					<threshold>Low</threshold>
					<xmlOutput>true</xmlOutput>
					<excludeFilterFile>.code/spotbugs-exclude.xml</excludeFilterFile>
				</configuration>
				<executions>
					<execution>
						<id>spot-bugs</id>
						<phase>process-classes</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>3.7.0.1746</version>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.0</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Below plugin ensures the execution of test cases during maven build -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<includes>
						<include>${runSuite}</include>
					</includes>
				</configuration>
			</plugin>

			<!-- Sonar-JaCoCo integration plugin -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.6.201602180812</version>
				<configuration>
					<destFile>${sonar.jacoco.reportPath}</destFile>
					<append>true</append>
				</configuration>
				<executions>
					<execution>
						<id>agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.openejb.maven</groupId>
				<artifactId>tomee-maven-plugin</artifactId>
				<version>1.7.1</version>
				<configuration>
					<tomeeVersion>1.7.1</tomeeVersion>
					<tomeeClassifier>plus</tomeeClassifier>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<dependencies>
					<dependency>
						<groupId>org.junit.platform</groupId>
						<artifactId>junit-platform-surefire-provider</artifactId>
						<version>1.0.1</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.3.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>2.23.0</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.12</version>
			<scope>provided</scope>
		</dependency>

		<!--BEGIN IDE NOT COMPTIBLE WITHJUNIT 5 -->
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-runner</artifactId>
			<version>1.2.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>5.2.0</version>
			<scope>test</scope>
		</dependency>
		<!-- END IDE NOT COMPTIBLE WITHJUNIT 5 -->
	</dependencies>
</project>
